extends Node
class_name InvulnerabilityComponent


###----------SCENE REFERENCES----------###

@export var entity:Node2D


###----------NODE REFERENCES----------###

@export var invulnerable_timer:Timer
@onready var point_light_2d: PointLight2D = $PointLight2D as PointLight2D


###----------PROPERTIES----------###

var is_invulnerable:bool = false
var invulnerability_shader:bool = false


###----------METHODS: AT SCENE TREE ENTER CALLED----------###

func _ready() -> void:
	invulnerable_timer.timeout.connect(_on_invulnerable_timer_timeout)

###----------METHODS----------###

func become_invulnerable(timer_value:float, invulnerability_shader:bool) -> void:
	# Entity gets invulnerable to damage for a short time period (defined in argument for parameter timer_value).
	# Invulnerability-shader-animation starts only with true-argument of invulnerability_shader.
	
	self.invulnerability_shader = invulnerability_shader
	is_invulnerable = true
	invulnerable_timer.wait_time = timer_value
	invulnerable_timer.start()
	if self.invulnerability_shader:
		_do_invulnerable_flash_shader_animation()


func _do_invulnerable_flash_shader_animation() -> void:
	entity.animations_handler.animations.material.set_shader_parameter("doBlink", true)
	point_light_2d.global_position = entity.animations_handler.animations.global_position
	point_light_2d.enabled = true
	
	var tween:Tween = get_tree().create_tween()
	tween.tween_method(
		func(value): entity.animations_handler.animations.material.set_shader_parameter("blinkProgress", value), 0.0, 1.0, .1
	).set_trans(Tween.TRANS_QUAD)
	tween.tween_method(
		func(value): entity.animations_handler.animations.material.set_shader_parameter("blinkProgress", value), 1.0, 0.0, .4
	).set_trans(Tween.TRANS_QUAD)
	
	await tween.finished
	
	entity.animations_handler.animations.material.set_shader_parameter("doBlink", false)
	point_light_2d.enabled = false


###----------CONNECTED SIGNALS----------###

func _on_invulnerable_timer_timeout() -> void:
	# Time period of invulnerability is over -> entity gets vulnerable again.
	
	is_invulnerable = false
	if invulnerability_shader:
		entity.animations_handler.animations.material.set_shader_parameter("doBlink", false)
		point_light_2d.enabled = false
		invulnerability_shader = false
